#!/usr/bin/env python3
import argparse, sys, json, datetime, os, re, shutil, subprocess, time
import matplotlib.pyplot
import numpy
import focusData

def getFilelist(folder, pattern):
	import glob
	fileCollection = []
	listing = glob.glob(os.path.join(folder, pattern))
	for f in listing:
		fdict = { "filename": f, "timestamp": os.path.getmtime(f) }
		fileCollection.append(fdict)

	fileCollection.sort(key=lambda item: item['timestamp'])
	return fileCollection

def runcommand(commandstring, checkonly = False):
	print("Running the command: %s"%commandstring)
	commandArray = []
	for part in commandstring.split(' '):
		commandArray.append(part)
	if not checkonly:
		subprocess.call(commandstring, shell=True)
		#returnValue = subprocess.Popen(commandstring, shell=True)
		#result = subprocess.run(commandstring, stdout=subprocess.PIPE, shell=True)
		#output = result.stdout.decode("utf-8")
		#return output

class reportLog:
	def __init__(self, filename):
		self.filename = filename
		self.entries = {}
		self.fileHandle = open(self.filename, "wt")

	def dumpAll(self):
		outputfile = open(self.filename, "wt")
		for log in self.entries:
			logString = "%s\n"%log['datetime']

	def writeLine(self, activity):
		timeStamp = str(datetime.datetime.now())
		self.fileHandle.write("%s, %s\n"%(timeStamp, activity))
		self.fileHandle.flush()
		

def checkFITSheaders(filename, header):
	headers = {}
	from astropy.io import fits
	try:
		hdulist = fits.open(filename)  # open the FITS file
	except FileNotFoundError:
		print("File not found: %s"%filename)
		return "not found" 
	hdr = hdulist[0].header  # the primary HDU header
	card = hdulist[0]
	for key in card.header.keys():
		headers[key] = card.header[key]
	hdulist.close(output_verify='ignore')

	try: return headers[header]
	except KeyError:
		return "not found"

		
if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='Reprocess the AG focus runs using ''autofocus_multi'' in ''--simulation'' mode.')
	parser.add_argument('--focusdata', default="allfocus.json", type=str, help='A list of focus runs in JSON format, generated by the ''getFocusRuns.py script''.')
	parser.add_argument('--limit', default=-1, type=int, help="Limit to the most recent 'n' focus runs. Default will reprocess all runs found in the .json input file.")
	parser.add_argument('--check', action="store_true", help="Just check the commands, don't actually execute the focus runs.")
	parser.add_argument('--planeonly', action="store_true", help="Skips the autofocus script, just try plane fitting.")
	parser.add_argument('run', type=str, default="none", help="Reprocess the focus run specified in this parameter and then stop.")
	parser.add_argument('--focusoffsets', default="/data/wcomm/mbc/wcomm-150-152/", type=str, help='A folder contain focus offset data.')
	args = parser.parse_args()
	workingPath = os.getcwd()
	dataFolder = "/obsdata/whta/"
	planeOnly = args.planeonly

	focusRuns = focusData.focusData()
	focusRuns.loadFromJSON(args.focusdata)

	print(focusRuns.summary())

	report = reportLog("report.log")
	
	
	runLimit = args.limit
	if runLimit == -1: runLimit = len(focusRuns.data)

	if args.run != "none":
		print("Focus run: ", args.run)
		runsToProcess = [ args.run ]

	index = 0
	runIDlist = []
	for runID in runsToProcess:
		run = focusRuns.getByRunID(runID)
		index+=1
		print("run:", run)
		camera = run['Camera']
		if camera != "AGWEAVE": 
			print("AGWEAVE not detected as the camera. Skipping")
			continue
		if runID in runIDlist:
			print("This runID has been done before we are seeing the entry for a different fibre.")
			continue
		else:
			runIDlist.append(runID)
		print("RunID: " + runID)
		targetList = focusRuns.getTargetsByRunID(runID)
		print(targetList)
		run['targetList'] = targetList
		
		# Copy the fits files to the working folder
		first = int(run['RunFirst'])
		last = int(run['RunLast'])
		print(first, last)
		focusFirst, focusLast = float(run['focusFirst']), float(run['focusLast'])
		runFiles = [ "r%d.fit"%index for index in range(first, last+1)]
		n = len(runFiles)
		print(runFiles, n)
		run['runFiles'] = runFiles

		workingFolderPath = os.path.join(workingPath, runID)
		run['workingFolderPath'] = workingFolderPath
		
		# Check the headers in the first FITS file
		source = os.path.join(dataFolder, run['night'], runFiles[0])
		plate = checkFITSheaders(source, "PLATE")
		# Also pick up telescope elevation and mountPA for later use
		zenithdistance = checkFITSheaders(source, "ZDSTART")
		mountPA = checkFITSheaders(source, "MNTPASTA")
		if plate=="not found":
			print("Could not determine PLATE A/B from the FITS headers of file %s. Skipping this focus run."%runFiles[0] )
			continue
		elif plate=="LIFU":
			print("This is a LIFU focus run... skipping...")
			continue
		else:
			print("Found plate %s"%plate)
			# strip the underscore from the plate name
			plate = plate.replace("_", "")

		# Create a working folder for the focus run
		if not os.path.exists(workingFolderPath): os.mkdir(workingFolderPath)

		for fileToCopy in runFiles:
			source = os.path.join(dataFolder, run['night'], fileToCopy)
			destination = os.path.join(workingFolderPath, fileToCopy)
			print("Copying %s to %s"%(source, destination))
			shutil.copyfile(source, destination)

		"""# Check the headers in the first FITS file
		plate = checkFITSheaders(os.path.join(workingFolderPath, runFiles[0]), "PLATE")
		if plate=="not found":
			print("Could not determine PLATE A/B from the FITS headers of file %s. Skipping this focus run."%runFiles[0] )
			continue
		elif plate=="LIFU":
			print("This is a LIFU focus run... skipping...")
			continue
		else:
			print("Found plate %s"%plate)
			# strip the underscore from the plate name
			plate = plate.replace("_", "")
		"""
		# Change folder to the autofocus output folder
		os.chdir(workingFolderPath)
		report.writeLine("changed folder to %s"%workingFolderPath)
		agFocusCommand = ""
		agFocusCommand+= "autofocus_multi"
		agFocusCommand+= " " + str(focusFirst) + " " + str(focusLast)
		agFocusCommand+= " --plate=%s"%plate
		agFocusCommand+= " --htmlDir . --planeDir . --simulation --noplane"
		agFocusCommand+= ""
		for aperture in targetList:
			agFocusCommand+=" -g %s"%aperture
		agFocusCommand+= " --no_curses"
		
		report.writeLine("running  %s"%agFocusCommand)
		if not planeOnly:
			runcommand(agFocusCommand, checkonly=args.check)

		# Apply the focus offsets
		focusOffsetFolder = args.focusoffsets
		report.writeLine("looking for applicable focus offsets in folder %s"%focusOffsetFolder)
		print("Looking for the offset files in %s"%focusOffsetFolder)
		fileCollection = getFilelist(focusOffsetFolder, "intrinsic*.txt")
		# Filter by plate
		tempCollection = []
		for file in fileCollection:
			plateString = "plate"+ plate.replace("PLATE", "")
			if plateString in file['filename']: tempCollection.append(file)
		fileCollection = tempCollection
		# Look for one matching the focus run date
		print("%d offset files found in folder %s"%(len(fileCollection), focusOffsetFolder))
		import re
		for file in fileCollection:
			fileDateString = re.findall("\d{8}", file['filename'])[0]
			file['dateString'] = fileDateString
		chosenOffsetFile = "none"
		for file in fileCollection:
			if int(file['dateString'])<int(run['night']): chosenOffsetFile = file
			 
		if chosenOffsetFile == "none": print("No offset file found for this focus run. Will not apply offsets")	 
		else: print("offset file for this run is: ", chosenOffsetFile['filename'])
		
		# Write all of the output to the results table...
		resultsReport = {
			"RunId" : runID,
			"night" : run['night'],
			"plate" : plate,
			"mountPA" : mountPA,
			"elevation": 90-zenithdistance
		}
		
		print()
		# Now run the plane fitting code of Jure's 
		# Look for the most recent plane output file in this folder
		report.writeLine("autofocus completed. running the plane fit procedure.")
		print("Looking for the most recent file in %s"%workingFolderPath)
		fileCollection = getFilelist("", "plane*.dat")
		planeFilename = fileCollection[-1]['filename']
		print("Most recent plane output file: %s"%planeFilename)
		analysisID = str(os.path.splitext(planeFilename)[0]).replace("plane-", "")
		resultsReport["AnalysisID"] = analysisID
		# Load the offset file
		offsetFile = open(chosenOffsetFile['filename'], 'rt')
		offsets = {}
		for line in offsetFile:
			line = line.strip()
			if line[0:2]=="ag": continue	# ignore the headings
			if len(line)<1: continue
			fields = line.split(',')
			fibreId = int(fields[1].strip())
			offset = float(fields[2].strip())
			offsets[fibreId] = offset
		print("will use the following offsets:", offsets)
		offsetFile.close()
		# Load the plane fit file
		planefitFile = open(planeFilename, "rt")
		tweakedFilename = planeFilename.replace("plane", "tweaked")
		tweakedFile = open(tweakedFilename, "wt")

		offsetsApplied = []
		for line in planefitFile:
			line = line.strip()
			if len(line)<1: continue
			fields = line.split()
			fibreID = int(fields[3].strip())
			x = float(fields[0].strip())
			y = float(fields[1].strip())
			focus = float(fields[2].strip())
		
			offsetInfo = { "fibreID" : fibreID, "original focus" : focus }

			# Apply the offset as a subtraction
			focus-=offsets[fibreID]
			offsetInfo["new focus"] = focus
			tweakedFile.write("%.3f %.3f %.3f %d\n"%(x, y, focus, fibreID))
			offsetsApplied.append(offsetInfo)
		tweakedFile.close()
		planefitFile.close()
		
		resultsReport["offsets applied"] = offsetsApplied
		
		planeFitCommand = "planefit"
		planeFitCommand+= " --noplot"
		#planeFitCommand+= " %s"%planeFilename
		planeFitCommand+= " %s"%tweakedFilename
		jsonOutputFilename = os.path.splitext(planeFilename)[0] + ".json" 
		planeFitCommand+= " --json=%s"%jsonOutputFilename


		report.writeLine("running %s"%planeFitCommand)
		print("running %s"%planeFitCommand)
		runcommand(planeFitCommand, checkonly=args.check)

		# Load up the results of the planefit to include in the report
		readJSON = open(jsonOutputFilename, "rt")
		planeFitResult = json.load(readJSON)
		readJSON.close()
		
		resultsReport['plane fit'] = planeFitResult
		print(json.dumps(resultsReport, indent=4))

		# Revert back to original folder
		os.chdir(workingPath)
		JSONreportFilename = "result_" + analysisID + ".json"
		JSONreporter = open(JSONreportFilename, "wt")
		json.dump(resultsReport, JSONreporter, indent=4)
		JSONreporter.write("\n")
		JSONreporter.close()		
		
