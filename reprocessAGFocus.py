#!/usr/bin/env python3
import argparse, sys, json, datetime, os, re, shutil, subprocess
import matplotlib.pyplot
import numpy
import focusData

def runcommand(commandstring, checkonly = False):
	print("Running the command: %s"%commandstring)

	if not checkonly:
		subprocess.call(commandstring, shell=True)

class reportLog:
	def __init__(self, filename):
		self.filename = filename
		self.entries = {}
		self.fileHandle = open(self.filename, "wt")

	def dumpAll(self):
		outputfile = open(self.filename, "wt")
		for log in self.entries:
			logString = "%s\n"%log['datetime']

	def writeLine(self, activity):
		timeStamp = str(datetime.datetime.now())
		self.fileHandle.write("%s, %s\n"%(timeStamp, activity))
		self.fileHandle.flush()
		

def checkFITSheaders(filename, header):
	headers = {}
	from astropy.io import fits
	try:
		hdulist = fits.open(filename)  # open the FITS file
	except FileNotFoundError:
		print("File not found: %s"%filename)
		return "not found" 
	hdr = hdulist[0].header  # the primary HDU header
	card = hdulist[0]
	for key in card.header.keys():
		headers[key] = card.header[key]
	hdulist.close(output_verify='ignore')

	try: return headers[header]
	except KeyError:
		return "not found"

		
if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='Reprocess the AG focus runs using ''autofocus_multi'' in ''--simulation'' mode.')
	parser.add_argument('focusdata', default="allfocus.json", type=str, help='A list of focus runs in JSON format, generated by the ''getFocusRuns.py script''.')
	parser.add_argument('--limit', default=-1, type=int, help="Limit to the most recent 'n' focus runs. Default will reprocess all runs found in the .json input file.")
	parser.add_argument('--check', action="store_true", help="Just check the commands, don't actually execute the focus runs.")
	args = parser.parse_args()
	
	focusRuns = focusData.focusData()
	focusRuns.loadFromJSON(args.focusdata)

	print(focusRuns.summary())

	#focusRuns.countFocusRuns("MOS")

	#sys.exit()

	#run = focusRuns.pop()

	report = reportLog("report.log")
	
	workingPath = "."
	dataFolder = "/obsdata/whta/"

	runLimit = args.limit
	if runLimit == -1: runLimit = len(focusRuns.data)
	runIDlist = []
	counter = 0
	index=0
	while counter<runLimit:
		run = focusRuns.data[index]
		index+=1
		camera = run['Camera']
		if camera != "AGWEAVE": continue
		print(camera)
		runID = run['RunID']
		if runID in runIDlist:
			print("This runID has been done before we are seeing the entry for a different fibre.")
			continue
		else:
			runIDlist.append(runID)
		print("RunID: " + runID)
		targetList = focusRuns.getTargetsByRunID(runID)
		print(targetList)
		
		
		# Copy the fits files to the working folder
		first = int(run['RunFirst'])
		last = int(run['RunLast'])
		print(first, last)
		focusFirst, focusLast = float(run['focusFirst']), float(run['focusLast'])
		runFiles = [ "r%d.fit"%index for index in range(first, last+1)]
		n = len(runFiles)
		print(runFiles, n)

		workingFolderPath = os.path.join(workingPath, runID)
		
		# Check the headers in the first FITS file
		source = os.path.join(dataFolder, run['night'], runFiles[0])
		plate = checkFITSheaders(source, "PLATE")
		if plate=="not found":
			print("Could not determine PLATE A/B from the FITS headers of file %s. Skipping this focus run."%runFiles[0] )
			continue
		elif plate=="LIFU":
			print("This is a LIFU focus run... skipping...")
			continue
		else:
			print("Found plate %s"%plate)
			# strip the underscore from the plate name
			plate = plate.replace("_", "")

		# OK we are going ahead with this one. Last add to the counter.
		counter+=1

		# Create a working folder for the focus run
		if not os.path.exists(workingFolderPath): os.mkdir(workingFolderPath)


		for fileToCopy in runFiles:
			source = os.path.join(dataFolder, run['night'], fileToCopy)
			destination = os.path.join(workingFolderPath, fileToCopy)
			print("Copying %s to %s"%(source, destination))
			shutil.copyfile(source, destination)

		# Check the headers in the first FITS file
		plate = checkFITSheaders(os.path.join(workingFolderPath, runFiles[0]), "PLATE")
		if plate=="not found":
			print("Could not determine PLATE A/B from the FITS headers of file %s. Skipping this focus run."%runFiles[0] )
			continue
		elif plate=="LIFU":
			print("This is a LIFU focus run... skipping...")
			continue
		else:
			print("Found plate %s"%plate)
			# strip the underscore from the plate name
			plate = plate.replace("_", "")
		
		# Change folder to the autofocus output folder
		os.chdir(workingFolderPath)
		report.writeLine("changed folder to %s"%workingFolderPath)
		agFocusCommand = ""
		agFocusCommand+= "autofocus_multi"
		agFocusCommand+= " " + str(focusFirst) + " " + str(focusLast)
		agFocusCommand+= " --plate=%s"%plate
		agFocusCommand+= " --htmlDir . --planeDir . --simulation --noplane"
		for aperture in targetList:
			agFocusCommand+=" -g %s"%aperture
		agFocusCommand+= " --no_curses"
		
		report.writeLine("running  %s"%agFocusCommand)
		runcommand(agFocusCommand, checkonly=args.check)


